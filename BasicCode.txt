// Date   : 2017.8.27.
// Title  : BOJ 
// Editor by Jihoon Kim

#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <algorithm>

#define _CRT_SECURE_NO_WARNINGS 
#define FOR(i,n) for(int i =0; i<n; i++)
#define M 100009
#define INF 1e8
#define MOD 1000000007
using namespace std;

typedef long long lint;
typedef pair<long,double> pld;
typedef pair<lint,lint> pll;

// _MBCS;%(PreprocessorDefinitions);_CRT_SECURE_NO_WARNINGS

using namespace std;

int min3(void a, void b, void c) { return min(min(a, b), c); }
int max3(void a, void b, void c) { return max(max(a, b), c); }

void displayV(vector<int> v) { for (auto a : v) printf("%d\n", a); }
void displayV2(vector<vector<int>> v) {
	int n_r = v.size(); int n_c = v[0].size();
	for (int i = 0; i < n_r; i++) {
		for (int j = 0; j < n_c; j++) { printf("%d\t", v[i][j]); }
		printf("\n");
	}
}
void displayVS(vector<string> v) { for (auto a : v) printf("%s", a.c_str()); printf("\n"); }
void displayQ(queue<int> q) {
	while (!q.empty()) {
		printf("%d\n", q.front());
		q.pop();
	}
}

bool find_Q(queue<int> Q, int value) {
	bool flag = false;
	while (!Q.empty()) {
		if (Q.front() == value)
		{
			flag = true; break;
		}
		Q.pop();
	}
	return flag;
}
int find_Q2(queue<int> Q, queue<int> Q2, int value) {
	while (!Q.empty()) {
		if (Q.front() == value)	break;
		Q.pop(); Q2.pop();
	}
	return Q2.front();
}
int count_Q(queue<int> Q, int value) {
	int count = 0;
	while (!Q.empty()) {
		if (Q.front() == value) count++;
		Q.pop();
	}
	return count;
}

vector<int> vv; // vv = vector<int>(num_r,0)
vector<int> dd; // dd = vector<int>(num_r,0)

vector<vector<int>> vv2; // vv2 = vector<vector<int>>(num_r,vector<int>(num_c,0))
vector<vector<int>> dd2; // dd2 = vector<vector<int>>(num_r,vector<int>(num_c,0))

queue<int> qq;

int main() {

    ios_base::sync_with_stdio(false);
	int t, n;

	scanf("%d", &t);
	while (t--) {
		scanf("%d", &n);
	}
	return 0;
}