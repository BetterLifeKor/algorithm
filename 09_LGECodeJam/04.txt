#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define MAX_PROJECT (15) 
typedef struct {
	int start_date; // 시작일
	int end_date; // 종료일
}DATA;

int     N; // 프로젝트 수
DATA    project_info[MAX_PROJECT]; // 프로젝트 정보

vector<DATA> myVector;
vector<vector<int>> countVector(15, vector<int>(0));

void Data_Input(void) {
	cin >> N; // 프로젝트 수 입력
			  // 프로젝트 정보 입력
	for (int i = 0; i<N; i++) {
		cin >> project_info[i].start_date >> project_info[i].end_date;
		myVector.push_back(project_info[i]);
	}
}

bool compare1(const DATA &i, const DATA &j) {
	return i.start_date < j.start_date;
}
bool compare2(const vector<int> &i, const vector<int> &j) {
	return i.size() > j.size();
}

int main(void) {
	int sol = 0;
	Data_Input(); // 입력 함수 실행 
	sol = N;
	sort(myVector.begin(), myVector.end(), compare1);

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < i; j++) {
			if (myVector[i].start_date <= myVector[j].end_date) {
				countVector[i].push_back(j);
				countVector[j].push_back(i);
			}

		}
	}
	vector<int> countSizeVector;
	int total_count=0;
	for (int i = 0; i < N; i++) {
		countSizeVector.push_back(countVector[i].size());
		total_count = total_count + countVector[i].size();
	}
	while(total_count >0){
		auto max_index = max_element(countSizeVector.begin(), countSizeVector.end()) - countSizeVector.begin();
		total_count = total_count - countSizeVector[max_index] * 2;
		sol--;
		for (auto a : countVector[max_index]) {
			countVector[a].erase(remove(countVector[a].begin(), countVector[a].end(), max_index), countVector[a].end());
			countSizeVector[a]--;
		}
		countSizeVector[max_index] = 0;
	}
	cout << sol << endl; // 결과 출력
	return 0;
}