문제 설명
직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 구하려고 합니다. 점 3개의 좌표가 들어있는 배열 v가 매개변수로 주어질 때, 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 return 하도록 solution 함수를 완성해주세요. 단, 직사각형의 각 변은 x축, y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.

제한사항
v는 세 점의 좌표가 들어있는 2차원 배열입니다.
v의 각 원소는 점의 좌표를 나타내며, 좌표는 [x축 좌표, y축 좌표] 순으로 주어집니다.
좌표값은 1 이상 10억 이하의 자연수입니다.
직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 [x축 좌표, y축 좌표] 순으로 담아 return 해주세요.


#include <iostream>
#include <vector>
using namespace std;

vector<int> solution(vector<vector<int> > v) {
  //vector<vector<int> >의 값은 다음과 같이 읽어올 수 있습니다.
    int x1= v[0][0]; int y1= v[0][1];
    int x2= v[1][0]; int y2= v[1][1];
    int x3= v[2][0]; int y3= v[2][1];    
    int x4, y4;
    if(x1==x2){
        if (y1 == y3){ // center 1
            x4 = x3;
            y4 = y2;
        }else{         // center 2
            x4 = x3;
            y4 = y1;
        }
    }else if(x2==x3){
        if (y2 == y1){ // center 2
            x4 = x1;
            y4 = y3;
        }else{         // center 3
            x4 = x1;
            y4 = y2;
        }
    }else{
        if (y3 == y2){ // center 3
            x4 = x2;
            y4 = y1;
        }else{         // center 1
            x4 = x2;
            y4 = y3;
        }
    }
    vector<int> ans;
    ans.emplace_back(x4);
    ans.emplace_back(y4);
    return ans;
}

#include <iostream>
#include <vector>
using namespace std;

vector<int> solution2(vector<vector<int> > v) {
    vector<int> ans = {0,0};
    for(int i=0; i<3; i++)
    {
        ans[0] ^= v[i][0];
        ans[1] ^= v[i][1];
    }
    return ans;
}
