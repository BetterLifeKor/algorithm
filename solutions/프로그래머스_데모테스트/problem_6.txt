문제 설명
N개의 스티커가 원형으로 연결되어 있습니다. 다음 그림은 N = 8인 경우의 예시입니다.
image
원형으로 연결된 스티커에서 몇 장의 스티커를 뜯어내어 뜯어낸 스티커에 적힌 숫자의 합이 최대가 되도록 하고 싶습니다. 단 스티커 한 장을 뜯어내면 양쪽으로 인접해있는 스티커는 찢어져서 사용할 수 없게 됩니다.

예를 들어 위 그림에서 14가 적힌 스티커를 뜯으면 인접해있는 10, 6이 적힌 스티커는 사용할 수 없습니다. 스티커에 적힌 숫자가 배열 형태로 주어질 때, 스티커를 뜯어내어 얻을 수 있는 숫자의 합의 최댓값을 return 하는 solution 함수를 완성해 주세요. 원형의 스티커 모양을 위해 배열의 첫 번째 원소와 마지막 원소가 서로 연결되어 있다고 간주합니다.

제한 사항
sticker는 원형으로 연결된 스티커의 각 칸에 적힌 숫자가 순서대로 들어있는 배열로, 길이(N)는 1 이상 100,000 이하입니다.
sticker의 각 원소는 스티커의 각 칸에 적힌 숫자이며, 각 칸에 적힌 숫자는 1 이상 100 이하의 자연수입니다.
원형의 스티커 모양을 위해 sticker 배열의 첫 번째 원소와 마지막 원소가 서로 연결되어있다고 간주합니다.

#include <vector>
#include <algorithm>
using namespace std;

int solution(vector<int> sticker)
{	
    if(sticker.size()==0) return 0;
    if(sticker.size()==1) return sticker[0];
	vector<int> v1;
	vector<int> v2;
	v1.assign(sticker.begin(), sticker.end()-1);
	v2.assign(sticker.begin()+1, sticker.end());
	int len = v1.size();
	vector<int> d1(len);
	vector<int> d2(len);
    d1[0] = v1[0]; 
    d2[0] = v2[0];
	if (len >= 1) { d1[1] = max(v1[0], v1[1]); d2[1] = max(v2[0], v2[1]); }
	if (len >= 2){
		for (int i = 2; i < len; i++) {
			d1[i] = max(d1[i - 2] + v1[i], d1[i - 1]);
			d2[i] = max(d2[i - 2] + v2[i], d2[i - 1]);
		}
	}
	int answer = max(d1[len - 1], d2[len - 1]);
	return answer;
}