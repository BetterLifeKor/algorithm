문제 설명
1와 0로 채워진 표(board)가 있습니다. 표 1칸은 1 x 1 의 정사각형으로 이루어져 있습니다. 표에서 1로 이루어진 가장 큰 정사각형을 찾아 넓이를 return 하는 solution 함수를 완성해 주세요. (단, 정사각형이란 축에 평행한 정사각형을 말합니다.)

예를 들어

1	2	3	4
0	1	1	1
1	1	1	1
1	1	1	1
0	0	1	0
가 있다면 가장 큰 정사각형은

1	2	3	4
0	1	1	1
1	1	1	1
1	1	1	1
0	0	1	0
가 되며 넓이는 9가 되므로 9를 반환해 주면 됩니다.

제한사항
표(board)는 2차원 배열로 주어집니다.
표(board)의 행(row)의 크기 : 1000 이하의 자연수
표(board)의 열(column)의 크기 : 1000 이하의 자연수
표(board)의 값은 1또는 0으로만 이루어져 있습니다.


#include<vector>
#include<iostream>
using namespace std;

int solution(vector<vector<int>> board)
{
	int answer = 1234;
	int row = board.size();
	int col = board[0].size();

	vector<vector<int>> check = vector<vector<int>>(row + 1, vector<int>(col + 1, 0));

	check[1][1] = board[0][0];
	for (int i = 1; i < row; i++) {
		check[i + 1][1] = board[i][0] + board[i - 1][0];
	}
	for (int i = 1; i < col; i++) {
		check[1][i + 1] = board[0][i] + board[0][i - 1];
	}
	bool flag = false;
	for (int i = 1; i < row+1; i++) {
		for (int j = 1; j < col+1; j++) {
			check[i][j] = board[i-1][j-1] + check[i - 1][j] + check[i][j - 1] - check[i - 1][j - 1];
			if (board[i - 1][j - 1]) flag = true;
		}
	}
	int maxRect = 0;
	for (int i = 1; i < row+1; i++) {
		for (int j = 1; j < col+1; j++) {
			int tempMax = maxRect;
			for (int k = maxRect; i + k < row+1 && j + k < col+1; k++) {
				if ((k + 1)*(k + 1) == check[i + k][j + k] - check[i - 1][j + k] - check[i + k][j - 1] + check[i - 1][j - 1])
					tempMax = k;
				else break;
			}
			maxRect = tempMax;
		}
	}
	if (flag) answer = (maxRect+1)*(maxRect + 1);
	else answer = 0;
	return answer;
}